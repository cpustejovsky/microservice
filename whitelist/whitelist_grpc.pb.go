// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package whitelist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// WhiteListClient is the client API for WhiteList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WhiteListClient interface {
	CheckIPAddress(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error)
}

type whiteListClient struct {
	cc grpc.ClientConnInterface
}

func NewWhiteListClient(cc grpc.ClientConnInterface) WhiteListClient {
	return &whiteListClient{cc}
}

func (c *whiteListClient) CheckIPAddress(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Output, error) {
	out := new(Output)
	err := c.cc.Invoke(ctx, "/whitelist.WhiteList/CheckIPAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WhiteListServer is the server API for WhiteList service.
// All implementations must embed UnimplementedWhiteListServer
// for forward compatibility
type WhiteListServer interface {
	CheckIPAddress(context.Context, *Input) (*Output, error)
	mustEmbedUnimplementedWhiteListServer()
}

// UnimplementedWhiteListServer must be embedded to have forward compatible implementations.
type UnimplementedWhiteListServer struct {
}

func (UnimplementedWhiteListServer) CheckIPAddress(context.Context, *Input) (*Output, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIPAddress not implemented")
}
func (UnimplementedWhiteListServer) mustEmbedUnimplementedWhiteListServer() {}

// UnsafeWhiteListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WhiteListServer will
// result in compilation errors.
type UnsafeWhiteListServer interface {
	mustEmbedUnimplementedWhiteListServer()
}

func RegisterWhiteListServer(s grpc.ServiceRegistrar, srv WhiteListServer) {
	s.RegisterService(&_WhiteList_serviceDesc, srv)
}

func _WhiteList_CheckIPAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhiteListServer).CheckIPAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whitelist.WhiteList/CheckIPAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhiteListServer).CheckIPAddress(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

var _WhiteList_serviceDesc = grpc.ServiceDesc{
	ServiceName: "whitelist.WhiteList",
	HandlerType: (*WhiteListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckIPAddress",
			Handler:    _WhiteList_CheckIPAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "whitelist/whitelist.proto",
}
